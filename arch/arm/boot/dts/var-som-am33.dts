/*
 * Copyright (C) 2014 Variscite LTD - http://www.variscite.com/
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */
/dts-v1/;

#include "am33xx.dtsi"

/ {
	model = "Variscite AM335x SOM";
	compatible = "ti,var-som-am33", "ti,am33xx";

	cpus {
		cpu@0 {
			cpu0-supply = <&vdd1_reg>;
		};
	};

	memory {
		device_type = "memory";
		reg = <0x80000000 0x10000000>; /* 256 MB */
	};

	am33xx_pinmux: pinmux@44e10800 {
		pinctrl-names = "default";
		pinctrl-0 = <&clkout1_pin &mmc1_pins &wlan_pins>;

		i2c0_pins: pinmux_i2c0_pins {
			pinctrl-single,pins = <
				0x188 (PIN_INPUT_PULLUP | MUX_MODE0)	/* i2c0_sda.i2c0_sda */
				0x18c (PIN_INPUT_PULLUP | MUX_MODE0)	/* i2c0_scl.i2c0_scl */
			>;
		};

		i2c1_pins: pinmux_i2c1_pins {
			pinctrl-single,pins = <
				0x158 (PIN_INPUT_PULLUP | MUX_MODE2)	/* spi0_d1.i2c1_sda */
				0x15c (PIN_INPUT_PULLUP | MUX_MODE2)	/* spi0_cs0.i2c1_scl */
			>;
		};

		uart0_pins: pinmux_uart0_pins {
			pinctrl-single,pins = <
				0x170 (PIN_INPUT_PULLUP | MUX_MODE0)	/* uart0_rxd.uart0_rxd */
				0x174 (PIN_OUTPUT_PULLDOWN | MUX_MODE0)	/* uart0_txd.uart0_txd */
			>;
		};

		uart1_pins_default: pinmux_uart1_pins_default {
			pinctrl-single,pins = <
				0x178 (PIN_INPUT | MUX_MODE0)			/* uart1_ctsn.uart1_ctsn */
				0x17C (PIN_OUTPUT_PULLDOWN | MUX_MODE0)	/* uart1_rtsn.uart1_rtsn */
				0x180 (PIN_INPUT_PULLUP | MUX_MODE0)	/* uart1_rxd.uart1_rxd */
				0x184 (PIN_OUTPUT | MUX_MODE0)			/* uart1_txd.uart1_txd */
			>;
		};

		uart1_pins_sleep: pinmux_uart1_pins_sleep {
			pinctrl-single,pins = <
				0x178 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x17C (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x180 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x184 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			>;
		};

		clkout1_pin: pinmux_clkout1_pin {
			pinctrl-single,pins = <
				0x1b0 (PIN_OUTPUT_PULLDOWN | MUX_MODE3)	/* xdma_event_intr0.clkout1 */
			>;
		};

		nandflash_pins_default: nandflash_pins_default {
			pinctrl-single,pins = <
				0x0 (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad0.gpmc_ad0 */
				0x4 (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad1.gpmc_ad1 */
				0x8 (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad2.gpmc_ad2 */
				0xc (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad3.gpmc_ad3 */
				0x10 (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad4.gpmc_ad4 */
				0x14 (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad5.gpmc_ad5 */
				0x18 (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad6.gpmc_ad6 */
				0x1c (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad7.gpmc_ad7 */
				0x70 (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_wait0.gpmc_wait0 */
				0x74 (PIN_INPUT_PULLUP | MUX_MODE7)	/* gpmc_wpn.gpio0_30 */
				0x7c (PIN_OUTPUT | MUX_MODE0)		/* gpmc_csn0.gpmc_csn0  */
				0x90 (PIN_OUTPUT | MUX_MODE0)		/* gpmc_advn_ale.gpmc_advn_ale */
				0x94 (PIN_OUTPUT | MUX_MODE0)		/* gpmc_oen_ren.gpmc_oen_ren */
				0x98 (PIN_OUTPUT | MUX_MODE0)		/* gpmc_wen.gpmc_wen */
				0x9c (PIN_OUTPUT | MUX_MODE0)		/* gpmc_ben0_cle.gpmc_ben0_cle */
			>;
		};

		nandflash_pins_sleep: nandflash_pins_sleep {
			pinctrl-single,pins = <
				0x0 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x4 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x8 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0xc (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x10 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x14 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x18 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x1c (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x70 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x74 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x7c (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x90 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x94 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x98 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x9c (PIN_INPUT_PULLDOWN | MUX_MODE7)
			>;
		};

		cpsw_default: cpsw_default {
			pinctrl-single,pins = <
				/* Slave 1 */
				0x10c (PIN_INPUT_PULLDOWN | MUX_MODE1)     /* mii1_crs.rmii1_crs_dv */
				0x110 (PIN_INPUT_PULLDOWN | MUX_MODE1)     /* mii1_rxerr.rmii1_rxerr */
				0x114 (PIN_OUTPUT | MUX_MODE1)             /* mii1_txen.rmii1_txen */
				0x124 (PIN_OUTPUT | MUX_MODE1)             /* mii1_txd1.rmii1_txd1 */
				0x128 (PIN_OUTPUT | MUX_MODE1)             /* mii1_txd0.rmii1_txd0 */
				0x13c (PIN_INPUT_PULLDOWN | MUX_MODE1)     /* mii1_rxd1.rmii1_rxd1 */
				0x140 (PIN_INPUT_PULLDOWN | MUX_MODE1)     /* mii1_rxd0.rmii1_rxd0 */
				0x144 (PIN_INPUT_PULLDOWN | MUX_MODE0)     /* rmii1_refclk.rmii1_refclk */
				0x138 (PIN_INPUT_PULLUP | MUX_MODE7)       /* mii1_rxd2.gpio2_19 */

				/* Slave 2 */
                /* Slave 2 is not used */
			>;
		};

		cpsw_sleep: cpsw_sleep {
			pinctrl-single,pins = <
				/* Slave 1 reset value */
				0x10c (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x110 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x114 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x124 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x128 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x13c (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x140 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x144 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x138 (PIN_INPUT_PULLUP | MUX_MODE7)       /* mii1_rxd2.gpio2_19 */

				/* Slave 2 reset value */
                /* Slave 2 is not used */
			>;
		};

		davinci_mdio_default: davinci_mdio_default {
			pinctrl-single,pins = <
				/* MDIO */
				0x148 (PIN_INPUT_PULLUP | SLEWCTRL_FAST | MUX_MODE0)	/* mdio_data.mdio_data */
				0x14c (PIN_OUTPUT_PULLUP | MUX_MODE0)			/* mdio_clk.mdio_clk */
			>;
		};

		davinci_mdio_sleep: davinci_mdio_sleep {
			pinctrl-single,pins = <
				/* MDIO reset value */
				0x148 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x14c (PIN_INPUT_PULLDOWN | MUX_MODE7)
			>;
		};

		mmc0_pins_default: pinmux_mmc0_pins {
			pinctrl-single,pins = <
				0x0F0 (PIN_INPUT_PULLUP | MUX_MODE0)	/* mmc0_dat3.mmc0_dat3 */
				0x0F4 (PIN_INPUT_PULLUP | MUX_MODE0)	/* mmc0_dat2.mmc0_dat2 */
				0x0F8 (PIN_INPUT_PULLUP | MUX_MODE0)	/* mmc0_dat1.mmc0_dat1 */
				0x0FC (PIN_INPUT_PULLUP | MUX_MODE0)	/* mmc0_dat0.mmc0_dat0 */
				0x100 (PIN_INPUT_PULLUP | MUX_MODE0)	/* mmc0_clk.mmc0_clk */
				0x104 (PIN_INPUT_PULLUP | MUX_MODE0)	/* mmc0_cmd.mmc0_cmd */
				0x78  (PIN_INPUT_PULLUP | MUX_MODE7)	/* gpmc_ben1.gpio1_28 */
			>;
		};

		mmc0_pins_sleep: pinmux_mmc0_pins_sleep {
			pinctrl-single,pins = <
				0x0F0 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x0F4 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x0F8 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x0FC (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x100 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x104 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x78  (PIN_INPUT_PULLDOWN | MUX_MODE7)
			>;
		};

		lcd_pins_default: lcd_pins_default {
			pinctrl-single,pins = <
				0xa0 0x00	/* lcd_data0.lcd_data0, OUTPUT | MODE0 */
				0xa4 0x00	/* lcd_data1.lcd_data1, OUTPUT | MODE0 */
				0xa8 0x00	/* lcd_data2.lcd_data2, OUTPUT | MODE0 */
				0xac 0x00	/* lcd_data3.lcd_data3, OUTPUT | MODE0 */
				0xb0 0x00	/* lcd_data4.lcd_data4, OUTPUT | MODE0 */
				0xb4 0x00	/* lcd_data5.lcd_data5, OUTPUT | MODE0 */
				0xb8 0x00	/* lcd_data6.lcd_data6, OUTPUT | MODE0 */
				0xbc 0x00	/* lcd_data7.lcd_data7, OUTPUT | MODE0 */
				0xc0 0x00	/* lcd_data8.lcd_data8, OUTPUT | MODE0 */
				0xc4 0x00	/* lcd_data9.lcd_data9, OUTPUT | MODE0 */
				0xc8 0x00	/* lcd_data10.lcd_data10, OUTPUT | MODE0 */
				0xcc 0x00	/* lcd_data11.lcd_data11, OUTPUT | MODE0 */
				0xd0 0x00	/* lcd_data12.lcd_data12, OUTPUT | MODE0 */
				0xd4 0x00	/* lcd_data13.lcd_data13, OUTPUT | MODE0 */
				0xd8 0x00	/* lcd_data14.lcd_data14, OUTPUT | MODE0 */
				0xdc 0x00	/* lcd_data15.lcd_data15, OUTPUT | MODE0 */
				0xe0 0x00	/* lcd_vsync.lcd_vsync, OUTPUT | MODE0 */
				0xe4 0x00	/* lcd_hsync.lcd_hsync, OUTPUT | MODE0 */
				0xe8 0x00	/* lcd_pclk.lcd_pclk, OUTPUT | MODE0 */
				0xec 0x00	/* lcd_ac_bias_en.lcd_ac_bias_en, OUTPUT | MODE0 */
			>;
		};

		lcd_pins_sleep: lcd_pins_sleep {
			pinctrl-single,pins = <
				0xa0 (PULL_DISABLE | MUX_MODE7)		/* lcd_data0.lcd_data0 */
				0xa4 (PULL_DISABLE | MUX_MODE7)		/* lcd_data1.lcd_data1 */
				0xa8 (PULL_DISABLE | MUX_MODE7)		/* lcd_data2.lcd_data2 */
				0xac (PULL_DISABLE | MUX_MODE7)		/* lcd_data3.lcd_data3 */
				0xb0 (PULL_DISABLE | MUX_MODE7)		/* lcd_data4.lcd_data4 */
				0xb4 (PULL_DISABLE | MUX_MODE7)		/* lcd_data5.lcd_data5 */
				0xb8 (PULL_DISABLE | MUX_MODE7)		/* lcd_data6.lcd_data6 */
				0xbc (PULL_DISABLE | MUX_MODE7)		/* lcd_data7.lcd_data7 */
				0xc0 (PULL_DISABLE | MUX_MODE7)		/* lcd_data8.lcd_data8 */
				0xc4 (PULL_DISABLE | MUX_MODE7)		/* lcd_data9.lcd_data9 */
				0xc8 (PULL_DISABLE | MUX_MODE7)		/* lcd_data10.lcd_data10 */
				0xcc (PULL_DISABLE | MUX_MODE7)		/* lcd_data11.lcd_data11 */
				0xd0 (PULL_DISABLE | MUX_MODE7)		/* lcd_data12.lcd_data12 */
				0xd4 (PULL_DISABLE | MUX_MODE7)		/* lcd_data13.lcd_data13 */
				0xd8 (PULL_DISABLE | MUX_MODE7)		/* lcd_data14.lcd_data14 */
				0xdc (PULL_DISABLE | MUX_MODE7)		/* lcd_data15.lcd_data15 */
				0xe0 (PIN_INPUT_PULLDOWN | MUX_MODE7)	/* lcd_vsync.lcd_vsync, OUTPUT | MODE0 */
				0xe4 (PIN_INPUT_PULLDOWN | MUX_MODE7)	/* lcd_hsync.lcd_hsync */
				0xe8 (PIN_INPUT_PULLDOWN | MUX_MODE7)	/* lcd_pclk.lcd_pclk */
				0xec (PIN_INPUT_PULLDOWN | MUX_MODE7)	/* lcd_ac_bias_en.lcd_ac_bias_en */
			>;
		};

		mcasp0_pins: mcasp0_pins {
			pinctrl-single,pins = <
				0x190 (PIN_INPUT_PULLDOWN | MUX_MODE0)  /* mcasp0_aclkx.mcasp0_aclkx */
				0x194 (PIN_INPUT_PULLDOWN | MUX_MODE0)  /* mcasp0_fsx.mcasp0_fsx */
				0x1A0 (PIN_INPUT_PULLDOWN | MUX_MODE2)  /* mcasp0_aclkr.mcasp0_axr2 */
				0x1A4 (PIN_INPUT_PULLDOWN | MUX_MODE2)  /* mcasp0_fsr.mcasp0_axr3 */
			>;
		};

		mcasp0_sleep_pins: mcasp0_sleep_pins {
			pinctrl-single,pins = <
				0x190 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x194 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x1A0 (PIN_INPUT_PULLDOWN | MUX_MODE7)
				0x1A4 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			>;
		};

		/* wl12xx/wl18xx card on mmc1 */
		mmc1_pins: pinmux_mmc1_pins {
			pinctrl-single,pins = <
				0x20 (PIN_INPUT_PULLUP | MUX_MODE2)	/* gpmc_ad8.mmc1_dat0 */
				0x24 (PIN_INPUT_PULLUP | MUX_MODE2)	/* gpmc_ad9.mmc1_dat1 */
				0x28 (PIN_INPUT_PULLUP | MUX_MODE2)	/* gpmc_ad10.mmc1_dat2 */
				0x2c (PIN_INPUT_PULLUP | MUX_MODE2)	/* gpmc_ad11.mmc1_dat3 */
				0x84 (PIN_INPUT_PULLUP | MUX_MODE2)	/* gpmc_csn2.mmc1_cmd */
				0x80 (PIN_INPUT_PULLUP | MUX_MODE2)	/* gpmc_csn1.mmc1_clk */
			>;
		};

		/* wl12xx/wl18xx card enable/irq GPIOs. */
		wlan_pins: pinmux_wlan_pins {
			pinctrl-single,pins = <
				0x1AC 0x07	/* mcasp0_ahclkx.gpio3_21, OUTPUT | MODE7 */
				0x1A8 0x27	/* mcasp0_axr1.gpio3_20, INPUT | MODE7 */
				0x12C 0x17	/* mii1_txclk.gpio3_9, OUTPUT_PULLUP | MODE7 */
			>;
		};

        /* dcan0 is not used */
	};

	ocp {
		uart0: serial@44e09000 {
			pinctrl-names = "default";
			pinctrl-0 = <&uart0_pins>;

			status = "okay";
		};

		uart1: serial@48022000 {
			pinctrl-names = "default", "sleep";
			pinctrl-0 = <&uart1_pins_default>;
			pinctrl-1 = <&uart1_pins_sleep>;

			status = "okay";
		};

		uart2: serial@48024000 {
			/*
			pinctrl-names = "default", "sleep";
			pinctrl-0 = <&uart2_pins_default>;
			pinctrl-1 = <&uart2_pins_sleep>;
			*/
			status = "okay";
		};

		uart3: serial@481a6000 {
			/*
			pinctrl-names = "default", "sleep";
			pinctrl-0 = <&uart3_pins_default>;
			pinctrl-1 = <&uart3_pins_sleep>;
			*/
			status = "okay";
		};

		uart4: serial@481a8000 {
			/*
			pinctrl-names = "default", "sleep";
			pinctrl-0 = <&uart4_pins_default>;
			pinctrl-1 = <&uart4_pins_sleep>;
			*/
			status = "okay";
		};

		uart5: serial@481aa000 {
			/*
			pinctrl-names = "default", "sleep";
			pinctrl-0 = <&uart5_pins_default>;
			pinctrl-1 = <&uart5_pins_sleep>;
			*/
			status = "okay";
		};

		i2c0: i2c@44e0b000 {
			pinctrl-names = "default";
			pinctrl-0 = <&i2c0_pins>;

			status = "okay";
			clock-frequency = <400000>;
			/* Set OPP50 (0.95V) for VDD core */
			sleep-sequence = /bits/ 8 <
				0x02 0x2d 0x25 0x1f /* Set VDD2 to 0.95V */
			>;

			/* Set OPP100 (1.10V) for VDD core */
			wake-sequence = /bits/ 8 <
				0x02 0x2d 0x25 0x2b /* Set VDD2 to 1.1V */
			>;
		};

		musb: usb@47400000 {
			status = "okay";

			control@44e10000 {
				status = "okay";
			};

			usb-phy@47401300 {
				status = "okay";
			};

			usb-phy@47401b00 {
				status = "okay";
			};

			usb@47401000 {
				status = "okay";
				dr_mode = "host";
			};

			usb@47401800 {
				status = "okay";
			};

			dma-controller@07402000  {
				status = "okay";
			};
		};

		i2c1: i2c@4802a000 {
			pinctrl-names = "default";
			pinctrl-0 = <&i2c1_pins>;

			status = "okay";
			clock-frequency = <100000>;

			tps: tps@2d {
				reg = <0x2d>;
			};

			tlv320aic3106: tlv320aic3106@1b {
				compatible = "ti,tlv320aic3106";
				reg = <0x1b>;
				status = "okay";

				/* Regulators */
				AVDD-supply = <&vaux2_reg>;
				IOVDD-supply = <&vaux2_reg>;
				DRVDD-supply = <&vaux2_reg>;
				DVDD-supply = <&vbat>;
			};

            /* ctw6120 is not used */
		};

		elm: elm@48080000 {
			status = "okay";
		};

		gpmc: gpmc@50000000 {
			status = "okay";
			pinctrl-names = "default", "sleep";
			pinctrl-0 = <&nandflash_pins_default>;
			pinctrl-1 = <&nandflash_pins_sleep>;
			ranges = <0 0 0x08000000 0x10000000>;	/* CS0: NAND */
			nand@0,0 {
				reg = <0 0 0>; /* CS0, offset 0 */
				nand-bus-width = <8>;
				gpmc,device-width = <1>;
				gpmc,sync-clk-ps = <0>;
				gpmc,cs-on-ns = <0>;
				gpmc,cs-rd-off-ns = <44>;
				gpmc,cs-wr-off-ns = <44>;
				gpmc,adv-on-ns = <6>;
				gpmc,adv-rd-off-ns = <34>;
				gpmc,adv-wr-off-ns = <44>;
				gpmc,we-on-ns = <0>;
				gpmc,we-off-ns = <40>;
				gpmc,oe-on-ns = <0>;
				gpmc,oe-off-ns = <54>;
				gpmc,access-ns = <64>;
				gpmc,rd-cycle-ns = <82>;
				gpmc,wr-cycle-ns = <82>;
				gpmc,wait-on-read = "true";
				gpmc,wait-on-write = "true";
				gpmc,bus-turnaround-ns = <0>;
				gpmc,cycle2cycle-delay-ns = <0>;
				gpmc,clk-activation-ns = <0>;
				gpmc,wait-monitoring-ns = <0>;
				gpmc,wr-access-ns = <40>;
				gpmc,wr-data-mux-bus-ns = <0>;
				ti,nand-ecc-opt= "bch8";
				ti,elm-id = <&elm>;
				/* MTD partition table */
		                /* All SPL-* partitions are sized to minimal length
				 * which can be independently programmable. For
				 * NAND flash this is equal to size of erase-block */
				#address-cells = <1>;
				#size-cells = <1>;
				partition@0 {
					label = "NAND.SPL";
					reg = <0x00000000 0x000020000>;
				};
				partition@1 {
					label = "NAND.SPL.backup1";
					reg = <0x00020000 0x00020000>;
				};
				partition@2 {
					label = "NAND.SPL.backup2";
					reg = <0x00040000 0x00020000>;
				};
				partition@3 {
					label = "NAND.SPL.backup3";
					reg = <0x00060000 0x00020000>;
				};
				partition@4 {
					label = "NAND.u-boot-spl-os";
					reg = <0x00080000 0x00040000>;
				};
				partition@5 {
					label = "NAND.u-boot";
					reg = <0x000C0000 0x00100000>;
				};
				partition@6 {
					label = "NAND.u-boot-env";
					reg = <0x001C0000 0x00020000>;
				};
				partition@7 {
					label = "NAND.u-boot-env.backup1";
					reg = <0x001E0000 0x00020000>;
				};
				partition@8 {
					label = "NAND.kernel";
					reg = <0x00200000 0x00800000>;
				};
				partition@9 {
					label = "NAND.file-system";
					reg = <0x00A00000 0x0F600000>;
				};
				partition@10 {
					label = "Android NAND.u-boot";
					reg = <0x00080000 0x00260000>;
				};
				partition@11 {
					label = "Android NAND.u-boot-env";
					reg = <0x000000260000 0x000000280000>;
				};
				partition@12 {
					label = "Android Kernel";
					reg = <0x000000280000 0x000000780000>;
				};
				partition@13 {
					label = "Android File System";
					reg = <0x000000780000 0x000010000000>;
				};
			};
		};

		lcdc: lcdc@0x4830e000 {
			pinctrl-names = "default", "sleep";
			pinctrl-0 = <&lcd_pins_default>;
			pinctrl-1 = <&lcd_pins_sleep>;
			status = "okay";
			display-timings {
				800x480p62 {
					clock-frequency = <30000000>;
					hactive = <800>;
					vactive = <480>;
					hfront-porch = <39>;
					hback-porch = <39>;
					hsync-len = <47>;
					vback-porch = <29>;
					vfront-porch = <13>;
					vsync-len = <2>;
					hsync-active = <1>;
					vsync-active = <1>;
				};
			};
		};

		sound {
			compatible = "ti,da830-evm-audio";
			ti,model = "AM335x-EVM";
			ti,audio-codec = <&tlv320aic3106>;
			ti,mcasp-controller = <&mcasp0>;
			ti,codec-clock-rate = <24000000>;
			ti,audio-routing =
				"Headphone Jack",       "HPLOUT",
				"Headphone Jack",       "HPROUT",
				"LINE1L",               "Line In",
				"LINE1R",               "Line In";
		};
	};

	vbat: fixedregulator@0 {
		compatible = "regulator-fixed";
		regulator-name = "vbat";
		regulator-min-microvolt = <5000000>;
		regulator-max-microvolt = <5000000>;
		regulator-boot-on;
	};

	wlan_en_reg: fixedregulator@1 {
		compatible = "regulator-fixed";
		regulator-name = "wlan-en-regulator";
		regulator-min-microvolt = <1800000>;
		regulator-max-microvolt = <1800000>;

		/* WLAN_EN GPIO for this board - Bank3, pin21 */
		gpio = <&gpio3 21 0>;

		/* WLAN card specific delay */
		startup-delay-us = <70000>;
		enable-active-high;
	};

	panel {
		compatible = "ti,tilcdc,panel";
		status = "okay";
		pinctrl-names = "default";
		pinctrl-0 = <&lcd_pins_default>;
		panel-info {
			ac-bias           = <255>;
			ac-bias-intrpt    = <0>;
			dma-burst-sz      = <16>;
			bpp               = <32>;
			fdd               = <0x80>;
			sync-edge         = <0>;
			sync-ctrl         = <1>;
			raster-order      = <0>;
			fifo-th           = <0>;
		};

		display-timings {
			800x480p62 {
				clock-frequency = <30000000>;
				hactive = <800>;
				vactive = <480>;
				hfront-porch = <39>;
				hback-porch = <39>;
				hsync-len = <47>;
				vback-porch = <29>;
				vfront-porch = <13>;
				vsync-len = <2>;
				hsync-active = <1>;
				vsync-active = <1>;
			};
		};
	};

	wlcore {
		compatible = "wlcore";
		gpio = <116>;

		/*
		 * TODO: use edge irqs for suspend/resume.
		 * in newer kerenls, we seem to miss interrupts when
		 * working with edge irqs, so revert back to level irqs.
		 */
		 /* platform-quirks = <1>; */

		/* if a 12xx card is there, configure the clock to
		   WL12XX_REFCLOCK_38_XTAL */
		board-ref-clock = <4>;
	};

	kim {
		compatible = "kim";
		nshutdown_gpio = <105>; /* Bank3, pin21 */
		dev_name = "/dev/ttyO1";
		flow_cntrl = <1>;
		baud_rate = <3000000>;
	};

	btwilink {
		compatible = "btwilink";
	};
};

#include "tps65910.dtsi"

/* dcan0 is not used */

&mcasp0 {
		pinctrl-names = "default", "sleep";
		pinctrl-0 = <&mcasp0_pins>;
		pinctrl-1 = <&mcasp0_sleep_pins>;

		status = "okay";

		op-mode = <0>;          /* MCASP_IIS_MODE */
		tdm-slots = <2>;
		/* 16 serializer */
		serial-dir = <  /* 0: INACTIVE, 1: TX, 2: RX */
			0 0 2 1
		>;
		tx-num-evt = <32>;
		rx-num-evt = <32>;
};

&tps {
	vcc1-supply = <&vbat>;
	vcc2-supply = <&vbat>;
	vcc3-supply = <&vbat>;
	vcc4-supply = <&vbat>;
	vcc5-supply = <&vbat>;
	vcc6-supply = <&vbat>;
	vcc7-supply = <&vbat>;
	vccio-supply = <&vbat>;

	rtc:0 {
		compatible = "ti,tps65910-rtc";
		interrupts = <0>;
	};

	regulators {
		vrtc_reg: regulator@0 {
			regulator-always-on;
		};

		vio_reg: regulator@1 {
			regulator-always-on;
		};

		vdd1_reg: regulator@2 {
			/* VDD_MPU voltage limits 0.95V - 1.325V with +/-4% tolerance */
			regulator-name = "vdd_mpu";
			regulator-min-microvolt = <912500>;
			regulator-max-microvolt = <1378000>;
			regulator-boot-on;
			regulator-always-on;
		};

		vdd2_reg: regulator@3 {
			/* VDD_CORE voltage limits 0.95V - 1.1V with +/-4% tolerance */
			regulator-name = "vdd_core";
			regulator-min-microvolt = <912500>;
			regulator-max-microvolt = <1150000>;
			regulator-boot-on;
			regulator-always-on;
		};

		vdd3_reg: regulator@4 {
			regulator-always-on;
		};

		vdig1_reg: regulator@5 {
			regulator-always-on;
		};

		vdig2_reg: regulator@6 {
			regulator-always-on;
		};

		vpll_reg: regulator@7 {
			regulator-always-on;
		};

		vdac_reg: regulator@8 {
			regulator-always-on;
		};

		vaux1_reg: regulator@9 {
			regulator-always-on;
		};

		vaux2_reg: regulator@10 {
			regulator-always-on;
		};

		vaux33_reg: regulator@11 {
			regulator-always-on;
		};

		vmmc_reg: regulator@12 {
			regulator-min-microvolt = <1800000>;
			regulator-max-microvolt = <3300000>;
			regulator-always-on;
		};
	};
};

&mac {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&cpsw_default>;
	pinctrl-1 = <&cpsw_sleep>;
	slaves = <1>;
};

&davinci_mdio {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&davinci_mdio_default>;
	pinctrl-1 = <&davinci_mdio_sleep>;
};

&cpsw_emac0 {
	phy_id = <&davinci_mdio>, <1>;
	phy-mode = "rmii";
};

&cpsw_emac1 {
	phy_id = <&davinci_mdio>, <7>;
	phy-mode = "rgmii-txid";
};

&phy_sel {
	rmii-clock-ext;
};

/* tsadc is not used */

&mmc1 {
	status = "okay";
	vmmc-supply = <&vmmc_reg>;
	bus-width = <4>;
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&mmc0_pins_default>;
	pinctrl-1 = <&mmc0_pins_sleep>;
	cd-gpios = <&gpio1 28 GPIO_ACTIVE_HIGH>;
};

&mmc2 {
	status = "okay";
	vmmc-supply = <&wlan_en_reg>;
	bus-width = <4>;
	ti,non-removable;
	ti,needs-special-hs-handling;
	cap-power-off-card;
	keep-power-in-suspend;
};
